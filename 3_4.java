public class A {
    public final int a;

    // Инициализация через конструктор
    public A(int value) {
        this.a = value;
    }

    // Инициализация через инициализаторный блок
    {
        // a = 5; // Этот код не будет работать, так как переменная a уже проинициализирована в конструкторе.
    }

    // Инициализация через статическую переменную для примера с static final
    public static final int staticFinalValue = 42;

    // Конструктор по умолчанию
    public A() {
        // Сюда можно добавить код для других действий, если нужно
    }

    public static void main(String[] args) {
        // 1. Инициализация через конструктор
        A obj1 = new A(10);
        System.out.println("Инициализация через конструктор: " + obj1.a); // Выведет 10

        // 2. Инициализация через инициализаторный блок (не используется напрямую в примере)
        // Но код инициализатора можно вызвать через конструктор, как показано в примере.

        // 3. Инициализация через статическое поле (static final)
        System.out.println("Инициализация через static final при объявлении: " + A.staticFinalValue); // Выведет 42

        // 4. Инициализация через конструктор в дочернем классе
        B obj2 = new B(100); // Вызов конструктора класса A через класс B
        System.out.println("Инициализация через конструктор в дочернем классе: " + obj2.a); // Выведет 100
    }
}

class B extends A {
    public B(int value) {
        super(value);  // Вызов конструктора родительского класса
    }
}
